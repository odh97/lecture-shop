{"version":3,"file":"static/js/939.52d94ccb.chunk.js","mappings":"wTAuCA,EAnC2BA,EAAAA,YAAiB,WAWzCC,GAAQ,IAVTC,EAAQ,EAARA,SACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAU,EAAVA,WACAC,EAAK,EAALA,MACAC,EAAI,EAAJA,KACAC,EAAO,EAAPA,QACAC,EAAU,EAAVA,WACGC,GAAK,YAEFC,GAAoBC,EAAAA,EAAAA,IAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAJ,OAAOG,EAAiB,YAAIH,GAAWD,GAAQ,GAAJ,OAAOI,EAAiB,YAAIJ,GAAQJ,GAAW,GAAJ,OAAOQ,EAAiB,YAAuB,kBAAZR,EAAuB,WAAH,OAAcA,GAAY,WAAaC,GAAY,GAAJ,OAAOO,EAAiB,aAAaN,GAAc,GAAJ,OAAOM,EAAiB,eAAeL,GAAS,GAAJ,OAAOK,EAAiB,WAEzWI,GAAqBC,EAAAA,EAAAA,KAAK,SAAS,kBAAKN,GAAK,IACjDR,UAAWW,EACXb,IAAKA,KAGP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAH,OAAMN,EAAiB,eAM1C,MAJ0B,kBAAfF,IACTQ,EAAkB,GAAH,OAAMA,EAAe,YAAIR,KAGtBO,EAAAA,EAAAA,KAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,GAEd,CAEA,OAAOA,CACT,I,8BCzBII,GAAQC,EAAAA,EAAAA,OAAK,WACjB,OACE,0BACE,gDAGJ,IAGA,SAASC,IACT,OACE,0BACE,mDAGJ,CAoDA,MAlDA,WAEA,IAAIC,GAAWC,EAAAA,EAAAA,MAEXC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAOA,CAAM,IAC/CC,GAAaF,EAAAA,EAAAA,KAAa,SAACG,GAAI,OAAIA,EAAKC,OAAO,IASnD,OAFaC,EAAAA,EAAAA,UAAQ,WAAK,OAAOT,CAAM,GAAG,KAGxC,iCACA,4CAAUG,EAAQO,KAAKC,SACvB,4CAAUR,EAAQO,KAAKE,QACvB,mBAAQC,QAAS,WAAKZ,GAASa,EAAAA,EAAAA,IAAU,KAAK,EAAE,wCAChD,UAAC,EAAK,YACN,4BACI,2BACA,+BACA,gDACA,0CACA,+CAGJ,2BACKR,EAAUS,KAAI,SAACC,EAAOC,GACrB,OACE,2BACE,wBAAKD,EAAME,MACX,wBAAKF,EAAML,QACX,wBAAKK,EAAMG,SACX,yBAAI,mBAAQN,QAAS,WAAMZ,GAASmB,EAAAA,EAAAA,IAAWJ,EAAME,IAAK,EAAE,mBAJrDD,EAOb,UAGJ,SAACnB,EAAK,MAGR,C","sources":["../node_modules/react-bootstrap/esm/Table.js","routes/CartCp.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n\n  const table = /*#__PURE__*/_jsx(\"table\", { ...props,\n    className: classes,\n    ref: ref\n  });\n\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n\n  return table;\n});\nexport default Table;","import React, { memo, useMemo } from 'react'\r\nimport {Table} from 'react-bootstrap'\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {changeName, changeAge} from '../store/user'\r\nimport {changePrdc} from '../store/store.js'\r\n\r\n\r\n// 성능 향상\r\n// 컴포넌트 재랜더링 관리\r\n// meomo 사용법\r\n// meomo는 props가 변할 때만 재렌더링을 한다. (기존 props 와 신규 props를 비교를 한다)\r\n// 재렌더링이 오래걸리는 컴포넌트에 적용하면 좋을거 같다.\r\n// props가 길고 복잡한 곳에 사용하면 오히려 단점으러 작용할 수 있다.\r\nlet Child = memo(function(){\r\nreturn(\r\n  <div>\r\n    <div>memo 함수</div>\r\n  </div>\r\n)\r\n})\r\n\r\n//useMemo 사용법\r\nfunction Child2(){\r\nreturn(\r\n  <div>\r\n    <div>useMemo 함수</div>\r\n  </div>\r\n)\r\n}\r\n\r\nfunction CartCp() {\r\n  \r\nlet dispatch = useDispatch();\r\n\r\nlet stateRd =  useSelector((state)=>{ return state });\r\nlet productRd =  useSelector( (data)=> data.product );\r\n\r\n// useMemo 사용법\r\n// useEffect 처럼 사용이 가능하다.\r\n// useEffect 와 useMemo의 차이\r\n// useMemo   : 컴포넌트 렌더링 시작 전에 실행\r\n// useEffect : 컴포넌트 렌더링이 끝난 후 실행\r\nlet result = useMemo(()=>{return Child2}, []);\r\n\r\nreturn (\r\n  <>\r\n  <h6>이름 : {stateRd.user.name}</h6>\r\n  <h6>나이 : {stateRd.user.age}</h6>\r\n  <button onClick={()=>{dispatch(changeAge(123))}}>나이 버튼</button>\r\n  <Table>\r\n  <thead>\r\n      <tr>\r\n      <th>#</th>\r\n      <th>상품명</th>\r\n      <th>수량</th>\r\n      <th>추가</th>\r\n      </tr>\r\n  </thead>\r\n  <tbody>\r\n      {productRd.map((value, index)=>{\r\n        return(\r\n          <tr key={index}>\r\n            <td>{value.id}</td>\r\n            <td>{value.name}</td>\r\n            <td>{value.count}</td>\r\n            <td><button onClick={()=>{ dispatch(changePrdc(value.id)) }}>+</button></td>\r\n          </tr>\r\n        )\r\n      })}\r\n  </tbody>\r\n  </Table>\r\n  <Child/>\r\n  </>\r\n)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default CartCp;"],"names":["React","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","Child","memo","Child2","dispatch","useDispatch","stateRd","useSelector","state","productRd","data","product","useMemo","user","name","age","onClick","changeAge","map","value","index","id","count","changePrdc"],"sourceRoot":""}